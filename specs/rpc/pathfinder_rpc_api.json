{
    "openrpc": "1.2.6",
    "info": {
        "title": "Pathfinder RPC API",
        "version": "0.1",
        "description": "Provides additional (pathfinder specific) methods over and above the Starknet RPC API"
    },
    "methods": [
        {
            "name": "pathfinder_version",
            "summary": "The version of the pathfinder node hosting this API.",
            "params": [],
            "result": {
                "name": "semver version",
                "required": true,
                "schema": {
                    "type": "string",
                    "description": "A semver compatible version string"
                }
            }
        },
        {
            "name": "pathfinder_lastL1AcceptedBlockHashAndNumber",
            "summary": "Get the block hash and number of the most recent block accepted on L1.",
            "params": [],
            "result": {
                "name": "result",
                "description": "The latest accepted block hash and number",
                "schema": {
                    "title": "Starknet block hash and number result",
                    "type": "object",
                    "properties": {
                        "block_hash": {
                            "title": "Block hash",
                            "$ref": "#/components/schemas/BLOCK_HASH"
                        },
                        "block_number": {
                            "title": "Block number",
                            "$ref": "#/components/schemas/BLOCK_NUMBER"
                        }
                    },
                    "required": ["block_hash", "block_number"]
                }
            },
            "errors": {
                "NO_BLOCKS": {
                    "code": 32,
                    "message": "There are no blocks"
                }
            }
        }
    ],
    "components": {
        "contentDescriptors": {},
        "schemas": {
            "BLOCK_ID": {
                "title": "Block hash, number or tag",
                "oneOf": [
                    {
                        "type": "object",
                        "properties": {
                            "block_hash": {
                                "$ref": "#/components/schemas/BLOCK_HASH"
                            }
                        }
                    }, {
                        "type": "object",
                        "properties": {
                            "block_number": {
                                "$ref": "#/components/schemas/BLOCK_NUMBER"
                            }
                        }
                    }, {
                        "$ref": "#/components/schemas/BLOCK_TAG"
                    }
                ]
            },
            "BLOCK_TAG": {
                "type": "string",
                "description": "A tag specifying a dynamic reference to a block",
                "enum": ["latest", "pending"]
            },
            "FELT": {
                "type": "string",
                "title": "Field element",
                "$comment": "A field element, represented as a string of hex digits",
                "description": "A field element represented as a string of hex digits with a 0x prefix and up-to 63 hex digits",
                "pattern": "^0x(0|[a-fA-F1-9]{1}[a-fA-F0-9]{0,62})$"
            },
            "BLOCK_NUMBER": {
                "description": "The block's number (its height)",
                "type": "integer",
                "minimum": 0
            },
            "BLOCK_HASH": {
                "$ref": "#/components/schemas/FELT"
            },
            "ADDRESS": {
                "$ref": "#/components/schemas/FELT"
            },
            "PROOF": {
                "type": "array",
                "title": "Ordered set of merkle tree nodes which constitute a merkle proof",
                "description": "Set of merkle tree nodes which constitute a merkle proof. Ordered from root towards the target.",
                "items": {
                    "$ref": "#/components/schemas/NODE"
                }
            },
            "NODE": {
                "oneof": [
                    {
                        "$ref": "#/components/schemas/BINARY_NODE"
                    }, {
                        "$ref": "#/components/schemas/EDGE_NODE"
                    }
                ]
            },
            "BINARY_NODE": {
                "type": "object",
                "properties": {
                    "binary": {
                        "type": "object",
                        "properties": {
                            "left": {
                                "title": "Left child's hash",
                                "$ref": "#/components/schemas/FELT"
                            },
                            "right": {
                                "title": "Right child's hash",
                                "$ref": "#/components/schemas/FELT"
                            }
                        },
                        "required": ["left", "right"]
                    }
                },
                "required": ["binary"]
            },
            "EDGE_NODE": {
                "type": "object",
                "properties": {
                    "edge": {
                        "type": "object",
                        "properties": {
                            "child": {
                                "title": "Child's hash",
                                "$ref": "#/components/schemas/FELT"
                            },
                            "path": {
                                "type": "object",
                                "properties": {
                                    "value": {
                                        "title": "The path of this edge node",
                                        "$ref": "#/components/schemas/FELT"
                                    },
                                    "len": {
                                        "title": "The bit length of this path",
                                        "type": "integer"
                                    }
                                },
                                "required": ["value", "len"]
                            }
                        },
                        "required": ["child", "path"]
                    }
                },
                "required": ["edge"]
            },
            "TXN_HASH": {
                "$ref": "#/components/schemas/FELT",
                "description": "The transaction hash, as assigned in Starknet",
                "title": "A transaction's hash"
            },
            "TX_GATEWAY_STATUS": {
                "type": "string",
                "enum": [
                    "NOT_RECEIVED",
                    "RECEIVED",
                    "PENDING",
                    "REJECTED",
                    "ACCEPTED_ON_L1",
                    "ACCEPTED_ON_L2",
                    "REVERTED",
                    "ABORTED"
                ],
                "description": "The status of a transaction"
            }
        },
        "errors": {
            "BLOCK_NOT_FOUND": {
                "code": 24,
                "message": "Block not found"
            },
            "PROOF_LIMIT_EXCEEDED": {
                "code": 10000,
                "message": "Too many storage keys requested",
                "data": {
                    "type": "object",
                    "properties": {
                        "limit": {
                            "description": "The maximum number of storage keys a request may have",
                            "type": "integer"
                        },
                        "requested": {
                            "description": "The number of storage keys this request had",
                            "type": "integer"
                        }
                    },
                    "required": ["limit", "requested"]
                }
            },
            "PROOF_MISSING": {
                "code": 10001,
                "message": "Merkle trie proof is not available"
            },
            "SUBSCRIPTION_TXN_HASH_NOT_FOUND": {
                "code": 10029,
                "message": "Transaction hash not found",
                "data": {
                    "type": "object",
                    "properties": {
                        "subscription_id": {
                            "description": "The subscription id",
                            "type": "integer"
                        },
                        "transaction_hash": {
                            "title": "transaction hash",
                            "$ref": "#/components/schemas/TXN_HASH"
                        }
                    },
                    "required": ["subscription_id", "transaction_hash"]
                }
            },
            "SUBSCRIPTION_GATEWAY_DOWN": {
                "code": 10030,
                "message": "Gateway is down",
                "data": {
                    "type": "object",
                    "properties": {
                        "subscription_id": {
                            "description": "The subscription id",
                            "type": "integer"
                        }
                    },
                    "required": ["subscription_id"]
                }
            }
        }
    }
}
