name: CI

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  compile_pathfinder_ethereum_tests:
    name: Compile l1 tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: rui314/setup-mold@v1
        with:
          mold-version: 1.4.1
          make-default: false
      - name: Enable mold
        run: |
          mkdir -p $HOME/.cargo
          cat << EOF >> $HOME/.cargo/config.toml
          [target.x86_64-unknown-linux-gnu]
          linker = "/usr/bin/clang"
          rustflags = ["-C", "link-arg=-fuse-ld=/usr/local/bin/mold"]
          EOF

          cat $HOME/.cargo/config.toml
      - uses: Swatinem/rust-cache@v2
        with:
          key: "mold"

      - name: Compile tests
        id: compile-tests
        # Note: profile changed because otherwise the test binary is 100MB+
        run: |
          cargo test --no-run --locked --profile stripdebuginfo --message-format=json \
            -p pathfinder-ethereum \
            | jq -r 'select(.reason=="compiler-artifact" and .target.test==true and .executable) | .executable' \
            | xargs -I '{}' bash -c 'file={}; mv ${file} $(basename ${file::(-17)})'

      - name: Archive test binary pathfinder_ethereum
        uses: actions/upload-artifact@v3
        with:
          name: test-binary-pathfinder-ethereum
          path: pathfinder_ethereum
          if-no-files-found: error

  test_pathfinder_ethereum_alchemy:
    name: l1 tests (alchemy)
    needs: compile_pathfinder_ethereum_tests
    runs-on: ubuntu-latest
    steps:       
      # Fetch the test binary artifact
      - uses: actions/download-artifact@v3
        with:
          name: test-binary-pathfinder-ethereum
      # Archiving removes the file permissions
      - name: Fix file permissions
        run: chmod +x pathfinder_ethereum

      - name: Execute tests
        run: |
          PATHFINDER_ETHEREUM_HTTP_GOERLI_URL=${{ secrets.ALCHEMY_GOERLI_URL }} \
            PATHFINDER_ETHEREUM_HTTP_GOERLI_PASSWORD=${{ secrets.ALCHEMY_GOERLI_PASSWORD }} \
            PATHFINDER_ETHEREUM_HTTP_MAINNET_URL=${{ secrets.ALCHEMY_MAINNET_URL }} \
            PATHFINDER_ETHEREUM_HTTP_MAINNET_PASSWORD=${{ secrets.ALCHEMY_MAINNET_PASSWORD }} \
            timeout 3m ./pathfinder_ethereum

  test_pathfinder_ethereum_infura:
    name: l1 tests (infura)
    needs: compile_pathfinder_ethereum_tests
    runs-on: ubuntu-latest
    steps:       
      # Fetch the test binary artifact
      - uses: actions/download-artifact@v3
        with:
          name: test-binary-pathfinder-ethereum
      # Archiving removes the file permissions
      - name: Fix file permissions
        run: chmod +x pathfinder_ethereum

      - name: Execute tests
        run: |
          PATHFINDER_ETHEREUM_HTTP_GOERLI_URL=${{ secrets.INFURA_GOERLI_URL }} \
            PATHFINDER_ETHEREUM_HTTP_GOERLI_PASSWORD=${{ secrets.INFURA_GOERLI_PASSWORD }} \
            PATHFINDER_ETHEREUM_HTTP_MAINNET_URL=${{ secrets.INFURA_MAINNET_URL }} \
            PATHFINDER_ETHEREUM_HTTP_MAINNET_PASSWORD=${{ secrets.INFURA_MAINNET_PASSWORD }} \
            timeout 3m ./pathfinder_ethereum

  test_all_except_pathfinder_ethereum:
    name: all tests w/o l1
    runs-on: ubuntu-latest
    steps:
      # Required for the python environment
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      - uses: actions/setup-python@v4
        id: setup_python
        with:
          python-version: '3.8'
          cache: 'pip'
          cache-dependency-path: 'py/requirements*.txt'
      # Workaround for setup-python issue #330 (https://github.com/actions/setup-python/issues/330)
      - uses: actions/cache@v3
        id: python_cache
        with:
          path: ${{ env.pythonLocation }}/**/site-packages
          key: site-packages-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('py/requirements*.txt') }}
      - run: pip install -e py/.

      # We want to strip the debug info as some of these test binaries are 100MB+ and pathfinder_lib is 1GB+
      - name: Execute tests
        run: timeout 15m cargo test --all-targets --workspace --locked --profile stripdebuginfo --exclude pathfinder-ethereum

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - run: cargo clippy --workspace --all-targets --locked -- -D warnings -D rust_2018_idioms

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
      - run: cargo fmt --all -- --check

  doc:
    runs-on: ubuntu-latest
    env:
      RUSTDOCFLAGS: "-D warnings"
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo doc --no-deps --document-private-items

  dep-sort:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: |
          cargo install cargo-sort
          cargo sort --check --workspace

  python:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        id: setup_python
        with:
          python-version: '3.8'
          cache: 'pip'
          cache-dependency-path: 'py/requirements*.txt'
      # Workaround for setup-python issue #330 (https://github.com/actions/setup-python/issues/330)
      - uses: actions/cache@v3
        id: python_cache
        with:
          path: ${{ env.pythonLocation }}/**/site-packages
          key: site-packages-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('py/requirements*.txt') }}
      - name: Install Python dependencies
        run: pip install -e py/.[dev]

      - name: Test (python)
        run: |
          cd py
          python -m pytest

      - name: Formatting (python)
        run: |
          cd py
          black --check .

      - name: Lints (python)
        run: |
          cd py
          flake8 src/ tests/ tools/


  fuzz_targets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
      - uses: rui314/setup-mold@v1
        with:
          mold-version: 1.4.1
          make-default: false
      - name: Enable mold
        run: |
          mkdir -p $HOME/.cargo
          cat << EOF >> $HOME/.cargo/config.toml
          [target.x86_64-unknown-linux-gnu]
          linker = "/usr/bin/clang"
          rustflags = ["-C", "link-arg=-fuse-ld=/usr/local/bin/mold"]
          EOF

          cat $HOME/.cargo/config.toml
      - uses: Swatinem/rust-cache@v2
        with:
          key: "mold"
      - run: cargo install cargo-fuzz
      - name: stark_hash
        run: cargo fuzz build
        working-directory: crates/stark_hash
