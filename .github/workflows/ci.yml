name: CI

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  compile_tests:
    name: Compile pathfinder tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: rui314/setup-mold@v1
        with:
          mold-version: 1.4.1
          make-default: false
      - name: Enable mold
        run: |
          mkdir -p $HOME/.cargo
          cat << EOF >> $HOME/.cargo/config.toml
          [target.x86_64-unknown-linux-gnu]
          linker = "/usr/bin/clang"
          rustflags = ["-C", "link-arg=-fuse-ld=/usr/local/bin/mold"]
          EOF

          cat $HOME/.cargo/config.toml
      - uses: Swatinem/rust-cache@v2
        with:
          key: "mold"

      - name: Compile tests
        id: compile-tests
        # Note: profile changed because otherwise test binary is 1GB+ in size..
        run: |
          cargo test --no-run --lib pathfinder -p pathfinder --locked --profile stripdebuginfo --message-format=json > /tmp/cargo-output.json
          echo -n "TEST_EXECUTABLE=" >> $GITHUB_OUTPUT
          jq -r 'select(.reason=="compiler-artifact" and .target.name=="pathfinder_lib") | .executable' /tmp/cargo-output.json >> $GITHUB_OUTPUT

      # Finds the pathfinder_lib- test binary, and renames it and the .d file to something simpler to use.
      # Essentially removing the hash to make running the file simpler (as it is used in other jobs).
      - name: Rename test binary
        run: mv ${{ steps.compile-tests.outputs.TEST_EXECUTABLE}} pathfinder_test

      - name: Archive test binary
        uses: actions/upload-artifact@v3
        with:
          name: test-binary
          path: |
            pathfinder_test
          if-no-files-found: error

  test_pathfinder:
    name: pathfinder tests (excludes L1)
    needs: compile_tests
    runs-on: ubuntu-latest
    steps:
      # Required for the python environment
      - uses: actions/checkout@v3

      # Fetch the test binary artifact
      - uses: actions/download-artifact@v3
        with:
          name: test-binary
      # Archiving removes the file permissions
      - name: Fix file permissions
        run: chmod +x pathfinder_test

      - uses: actions/setup-python@v4
        id: setup_python
        with:
          python-version: '3.8'
          cache: 'pip'
          cache-dependency-path: 'py/requirements*.txt'
      # Workaround for setup-python issue #330 (https://github.com/actions/setup-python/issues/330)
      - uses: actions/cache@v3
        id: python_cache
        with:
          path: ${{ env.pythonLocation }}/**/site-packages
          key: site-packages-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('py/requirements*.txt') }}
      - run: pip install -e py/.

      - name: Execute tests
        run: "./pathfinder_test --skip ethereum::"

  test_alchemy:
    name: pathfinder tests (alchemy)
    needs: compile_tests
    runs-on: ubuntu-latest
    steps:       
      # Fetch the test binary artifact
      - uses: actions/download-artifact@v3
        with:
          name: test-binary
      # Archiving removes the file permissions
      - name: Fix file permissions
        run: chmod +x pathfinder_test

      - name: Execute tests
        run: |
          PATHFINDER_ETHEREUM_HTTP_GOERLI_URL=${{ secrets.ALCHEMY_GOERLI_URL }} \
            PATHFINDER_ETHEREUM_HTTP_GOERLI_PASSWORD=${{ secrets.ALCHEMY_GOERLI_PASSWORD }} \
            PATHFINDER_ETHEREUM_HTTP_MAINNET_URL=${{ secrets.ALCHEMY_MAINNET_URL }} \
            PATHFINDER_ETHEREUM_HTTP_MAINNET_PASSWORD=${{ secrets.ALCHEMY_MAINNET_PASSWORD }} \
            timeout 3m ./pathfinder_test ethereum::

  test_infura:
    name: pathfinder tests (infura)
    needs: compile_tests
    runs-on: ubuntu-latest
    steps:       
      # Fetch the test binary artifact
      - uses: actions/download-artifact@v3
        with:
          name: test-binary
      # Archiving removes the file permissions
      - name: Fix file permissions
        run: chmod +x pathfinder_test

      - name: Execute tests
        run: |
          PATHFINDER_ETHEREUM_HTTP_GOERLI_URL=${{ secrets.INFURA_GOERLI_URL }} \
            PATHFINDER_ETHEREUM_HTTP_GOERLI_PASSWORD=${{ secrets.INFURA_GOERLI_PASSWORD }} \
            PATHFINDER_ETHEREUM_HTTP_MAINNET_URL=${{ secrets.INFURA_MAINNET_URL }} \
            PATHFINDER_ETHEREUM_HTTP_MAINNET_PASSWORD=${{ secrets.INFURA_MAINNET_PASSWORD }} \
            timeout 3m ./pathfinder_test ethereum::

  test_stark_curve:
    name: stark_curve tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: tests
        run: cargo test -p stark_curve --all-targets --locked

  test_stark_hash:
    name: stark_hash tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: tests
        run: cargo test -p stark_hash --all-targets --locked

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - run: cargo clippy --workspace --all-targets --locked -- -D warnings -D rust_2018_idioms

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
      - run: cargo fmt --all -- --check

  doc:
    runs-on: ubuntu-latest
    env:
      RUSTDOCFLAGS: "-D warnings"
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo doc --no-deps --document-private-items

  dep-sort:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: |
          cargo install cargo-sort
          cargo sort --check --workspace

  python:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Prepare py/
        run: |
          cd py
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -e .[dev]

      - name: Test (python)
        run: |
          source py/.venv/bin/activate
          cd py
          pytest

      - name: Formatting (python)
        run: |
          source py/.venv/bin/activate
          cd py
          black --check .

      - name: Lints (python)
        run: |
          source py/.venv/bin/activate
          cd py
          flake8 src/ tests/ tools/

      - uses: dtolnay/rust-toolchain@stable
      - uses: rui314/setup-mold@v1
        with:
          mold-version: 1.4.1
          make-default: false
      - name: Enable mold
        run: |
          mkdir -p $HOME/.cargo
          cat << EOF >> $HOME/.cargo/config.toml
          [target.x86_64-unknown-linux-gnu]
          linker = "/usr/bin/clang"
          rustflags = ["-C", "link-arg=-fuse-ld=/usr/local/bin/mold"]
          EOF

          cat $HOME/.cargo/config.toml

      - uses: Swatinem/rust-cache@v2
        with:
          key: "mold"
      - name: Integration (rust)
        run: |
          source py/.venv/bin/activate
          cargo test --no-run -p pathfinder
          timeout 5m cargo test -p pathfinder -- cairo::ext_py --ignored

  fuzz_targets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
      - uses: rui314/setup-mold@v1
        with:
          mold-version: 1.4.1
          make-default: false
      - name: Enable mold
        run: |
          mkdir -p $HOME/.cargo
          cat << EOF >> $HOME/.cargo/config.toml
          [target.x86_64-unknown-linux-gnu]
          linker = "/usr/bin/clang"
          rustflags = ["-C", "link-arg=-fuse-ld=/usr/local/bin/mold"]
          EOF

          cat $HOME/.cargo/config.toml
      - uses: Swatinem/rust-cache@v2
        with:
          key: "mold"
      - run: cargo install cargo-fuzz
      - name: stark_hash
        run: cargo fuzz build
        working-directory: crates/stark_hash
