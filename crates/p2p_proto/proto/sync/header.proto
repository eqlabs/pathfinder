syntax = "proto3";

package starknet.sync.header;

import "proto/common.proto";
import "proto/sync/common.proto";

// Note: commitments may change to be for the previous blocks like comet/tendermint
// hash of block header sent to L1
message SignedBlockHeader {
    starknet.common.Hash block_hash = 1; //  For the structure of the block hash, see https://docs.starknet.io/documentation/architecture_and_concepts/Network_Architecture/header/#block_hash
    starknet.common.Hash parent_hash = 2;
    uint64 number = 3; // This can be deduced from context. We can consider removing this field.
    uint64 time = 4; // Encoded in Unix time.
    starknet.common.Address sequencer_address = 5;
    starknet.common.Hash state_root = 6;   // Patricia root of contract and class patricia tries. Each of those tries are of height 251. Same as in L1. Later more trees will be included
    starknet.sync.common.StateDiffCommitment state_diff_commitment = 7; // The state diff commitment returned  by the Starknet Feeder Gateway
    // For more info, see https://community.starknet.io/t/introducing-p2p-authentication-and-mismatch-resolution-in-v0-12-2/97993
    // The leaves contain a hash of the transaction hash and transaction signature.
    starknet.common.Patricia transactions = 8;   // By order of execution. TBD: required? the client can execute (powerful machine) and match state diff
    starknet.common.Patricia events = 9;   // By order of issuance. TBD: in receipts?
    starknet.common.Hash receipts = 10;  // By order of issuance. This is a patricia root. No need for length because it's the same length as transactions.
    string protocol_version = 11; // Starknet version
    starknet.common.Uint128 l1_gas_price_fri = 12;
    starknet.common.Uint128 l1_gas_price_wei = 13;
    starknet.common.Uint128 l1_data_gas_price_fri = 14;
    starknet.common.Uint128 l1_data_gas_price_wei = 15;
    starknet.common.Uint128 l2_gas_price_fri = 16;
    starknet.common.Uint128 l2_gas_price_wei = 17;
    starknet.common.L1DataAvailabilityMode l1_data_availability_mode = 18;
    // for now, we assume a small consensus, so this fits in 1M. Else, these will be repeated and extracted from this message.
    repeated starknet.common.ConsensusSignature signatures = 19;
    // can be more explicit here about the signature structure as this is not part of account abstraction
}

// sent to all peers (except the ones this was received from, if any).
// for a fraction of peers, also send the GetBlockHeaders response (as if they asked for it for this block)
message NewBlock {
    oneof maybe_full {
        starknet.common.BlockID id = 1;
        BlockHeadersResponse header = 2;
    }
}


message BlockHeadersRequest {
    starknet.sync.common.Iteration iteration = 1;
}

// Responses are sent ordered by the order given in the request.
message BlockHeadersResponse {
    oneof header_message {
        SignedBlockHeader header = 1;
        starknet.common.Fin fin = 2; // Fin is sent after the peer sent all the data or when it encountered a block that it doesn't have its header.
    }
}