syntax = "proto3";

package starknet.snapshot;

import "common.proto";
import "state.proto";

message PatriciaNode {
    message Edge {
        uint32 length = 1;
        starknet.common.Felt252 path = 2; // as bits of left/right
        starknet.common.Felt252 value = 3;
    }
    message Binary {
        starknet.common.Felt252 left = 1;
        starknet.common.Felt252 right = 2;
    }

    oneof node {
        Edge edge = 1;
        Binary binary = 2;
    }
}

// non leaf nodes required to build the trie given the range (leaves)
message PatriciaRangeProof {
    repeated PatriciaNode nodes = 1;
}

// leafs of the contract state tre
message ContractState {
    starknet.common.Hash address = 1; // the key
    starknet.common.Hash class = 2;
    starknet.common.Hash storage = 3; // patricia
    uint64 nonce = 4;
}

// request a range from the contract state tree that matches the given root (block)
// starts at 'start' and ends no less than 'end'.
// the result is  (ContractRange+, PatriciaRangeProof)*
message GetContractRange {
    starknet.common.Hash root = 2;
    starknet.common.Hash start = 3;
    starknet.common.Hash end = 4;
    uint32 chunks_per_proof = 5; // how many ContractRange items to send before sending a proof
}

// stream of leaves in the contracts tree
message ContractRange {
    repeated ContractState state = 1;
}

// duplicate of GetContractRange. Can introduce a 'type' instead.
// result is (Classes+, PatriciaRangeProof)*
message GetClassRange {
    starknet.common.Hash root = 1;
    starknet.common.Hash start = 2;
    starknet.common.Hash end = 3;
    uint32 chunks_per_proof = 4;
}

// A position in some contract's state tree is identified by the state tree's root and the key in it
message StorageLeafQuery {
    starknet.common.Hash root = 1;
    starknet.common.Felt252 key = 2;
}

message StorageRangeQuery {
    uint32 range_id = 1;
    StorageLeafQuery start = 2;
    StorageLeafQuery end = 3;
}

// result is (ContractStorageRange+, PatriciaRangeProof)*
message GetContractStorageRange {
    starknet.common.Hash state_root = 1;
    repeated StorageRangeQuery query = 2;
}

message ContractStorageRange {
    uint32 range_id = 1;
    starknet.common.Hash root = 2;
    repeated starknet.state.ContractStoredValue keyValue = 3;
}
