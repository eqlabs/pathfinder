syntax = "proto3";

package starknet.mempool;

import "common.proto";
import "transaction.proto";

// Support also non-validating node that wants to know of the mempool (e.g. to estimate fee in case of first price)
// Result is PooledTransactions+
message PooledTransactionsRequest
{
    message Known {
        oneof known {
            starknet.common.Hashes txs = 1;  // for mempool of 2000 txs, this will be 64K. Can use Hash32 instead (8K)...
            uint64 marker              = 2;  // since last returned marker.
        }
    }
    optional Known known = 1;
}

// Can be also a push, similar to NewBlock. So a full node that accepts a new transaction from a wallet
// can propagate it without being pulled
// nodes should track state diffs to know when txs have been included (the contract nonce increases)
message PolledTransactionsResponse {
    optional uint64 marker = 1;  // optional, if the peer supports that.
    bool     baseline      = 2;  // means treat all data as baseline, not diff (may be if 'known' was sent but the mempool was reset/reorged

    oneof responses {
        starknet.transaction.Transactions pending = 3;  // if 'known' is given, they will be only txs added after the known
        starknet.common.Fin               fin     = 4;
    }
}
