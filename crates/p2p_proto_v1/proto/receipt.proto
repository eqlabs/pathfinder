syntax = "proto3";

package starknet.receipt;

import "common.proto";

message MessageToL1 {
  starknet.common.Felt252          from_address = 1;
  repeated starknet.common.Felt252 payload      = 2;
  EthereumAddress                  to_address   = 3;
}

message EthereumAddress {
  bytes elements = 1;
}

message MessageToL2 {
  EthereumAddress                  from_address         = 1;
  repeated starknet.common.Felt252 payload              = 2;
  starknet.common.Felt252          to_address           = 3;
  starknet.common.Felt252          entry_point_selector = 4;
  starknet.common.Felt252          nonce                = 5;
}

message Receipt {
  message ExecutionResources {
    message BuiltinCounter {
      uint32 bitwise       = 1;
      uint32 ecdsa         = 2;
      uint32 ec_op         = 3;
      uint32 pedersen      = 4;
      uint32 range_check   = 5;
      uint32 poseidon      = 6;
      uint32 keccak        = 7;
      uint32 output        = 8;
      uint32 segment_arena = 9;
    }

    BuiltinCounter builtins     = 1;
    uint32         steps        = 2;
    uint32         memory_holes = 3;
  }

  message Common {
    starknet.common.Hash    transaction_hash    = 1;
    starknet.common.Felt252 actual_fee          = 2;
    repeated MessageToL1    messages_sent       = 3;
    ExecutionResources      execution_resources = 4;
    string                  revert_reason       = 5;
    // FIXME this was missing
    optional MessageToL2    consumed_message    = 6;
  }


  message Invoke {
    Common common = 1;
  }

  message L1Handler {
    Common               common   = 1;
    starknet.common.Hash msg_hash = 2;
  }

  message Declare {
    Common common = 1;
  }

  message Deploy {
    Common                  common           = 1;
    starknet.common.Felt252 contract_address = 2;
  }

  message DeployAccount {
    Common                  common           = 1;
    starknet.common.Felt252 contract_address = 2;
  }

  oneof receipt {
    Invoke        invoke            = 1;
    L1Handler     l1_handler        = 2;
    Declare       declare           = 3;
    Deploy        deprecated_deploy = 4;
    DeployAccount deploy_account    = 5;
  }
}

message ReceiptsRequest {
  starknet.common.Iteration iteration = 1;
}

message Receipts {
    repeated Receipt items = 2;
}

message ReceiptsResponse {
  optional starknet.common.BlockID id = 1; // may not appear if Fin is sent to end the whole response

  oneof responses {
    Receipts            receipts = 2;
    starknet.common.Fin fin      = 3;
  }
}
